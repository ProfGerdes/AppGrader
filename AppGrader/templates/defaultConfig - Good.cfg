AppGrader Assignment Configuration File
CfgLanguage	VB
cfgAssignmentTitle	
dgvDevEnvironment	hasSLN	SLN File		True	True	10	10	The Solution File (*.SLN) is created automatically when you create your application. If you click this file, Visual Studio loads your application. If it is missing from the submitted files, it is likely that you did not zip up the whole application. If it is saved in the default location, go to Visual Studio / Projects and zip the folder with the name you called your Application.	
dgvDevEnvironment	hasvbProj	vbProj File		True	True	10	10	The vbProj File (*.vbProj) is created automatically when you create your application. Similar to the SLN file, if you click this file, Visual Studio loads your application. If it is missing from the submitted files, it is likely that you did not zip up the whole application. If it is saved in the default location, go to Visual Studio / Projects and zip the folder with the name you called your Application.	
dgvDevEnvironment	hasVBVersion	VB Version	Provided by the Student's Installation	True	True	0	0	This is created automatically and stored in your application files. If it was not found in your submission, you likely did not zip up the whole project folder. 	
dgvAppInfo	hasSplashScreen	Add Splash Screen		False	False	3	3	The Splash Screen is a special Form that is used as a startup screen. Two things you need to deal with with Splash Screens. The first is to tell your application to use it. This is done by setting the Application Properties. Either click the Project Tab, and then the Properties at the bottom of the list, or right click the project name in the Solution Explorer, then the Properties option. Then specify the desired Startup Form at the bottom of the page. The second thing is setting the properties that show up on the Splash Screen. You do this differently than you do it on other Forms. You need to go to the Application Properties, then click on the Assembly Information button. If you change the properties on the Form itself, they will be overwritten with the settings in Assembly Information.	
dgvAppInfo	hasAboutBox	Add About Box		False	False	3	3	The About Box is another special Form that is used as an on-demand information screen. Two things you need to deal with with About Boxes. The first is to tell your application to display it. This is done by putting a button on your form and opening the About Box just like any other Form.  The second thing is setting the properties that show up on the About Box. You do this differently than you do it on other Forms. You need to go to the Application Properties, then click on the Assembly Information button. If you change the properties on the Form itself, they will be overwritten with the settings in Assembly Information.	
dgvAppInfo	InfoAppTitle	Modify App Title	Application Grader	False	False	3	3	The Application Title is set in the Assembly Information in the Application Properties screen, which is accessed by right clicking the application title in the Solution Explorer and clicking Properties.	
dgvAppInfo	InfoDescription	Modify Description	There is a lot of administration needed when grading assignments submitted through Blackboard, especially when each submission is zipped. Errors due to excessively long file names can result. This application trims each zip filename leaving only the user ID, and then unzips these files placing the contained files in their own subdirectory. It was designed to handle Programming Homework, but it will handle any compressed file submission.	False	False	2	5	The Description is set in the Assembly Information in the Application Properties screen, which is accessed by right clicking the application title in the Solution Explorer and clicking Properties.	
dgvAppInfo	InfoProduct	Modify Product		False	False	2	2	The Product name  is set in the Assembly Information in the Application Properties screen, which is accessed by right clicking the application title in the Solution Explorer and clicking Properties.	
dgvAppInfo	InfoCompany	Modify Company		False	False	2	2	The Company is set in the Assembly Information in the Application Properties screen, which is accessed by right clicking the application title in the Solution Explorer and clicking Properties.	
dgvAppInfo	InfoTrademark	Modify Trademark		False	False	2	2	The Trademark is set in the Assembly Information in the Application Properties screen, which is accessed by right clicking the application title in the Solution Explorer and clicking Properties.	
dgvAppInfo	InfoCopyright	Modify Copyright	Copyright Â© John Gerdes 2015	False	False	2	2	The Copyright is set in the Assembly Information in the Application Properties screen, which is accessed by right clicking the application title in the Solution Explorer and clicking Properties.	
dgvCompileOptions	OptionStrict	Option Strict On		True	True	10	10	Setting Option Strict On is considered a Best Practice. Doing so forces the programmer to explicitly code all narrowing data conversions (situation where you might lose data when you convert the number, such as where you would lose the decimal portion of a number converting from Decimal to Integer). You can add the statement Option Strict On at the very top of your Class file, but it is better to set Visual Studio's default so that it is always On. Click on Tools / Options / Compile and click the Option Strict checkbox.	
dgvCompileOptions	OptionExplicit	Option Explicit On		False	False	3	3	Setting Option Explicit On is considered a Best Practice. Doing so forces the programmer to declare all variables. You can add the statement Option Strict On at the very top of your Class file, but it is better to set Visual Studio's default so that it is always On. Click on Tools / Options / Compile and click the Option Explicit checkbox.	
dgvComments	CommentSubs	Req Comments in Subs		True	True	1	5	Descriptive comments explaining what a Subroutine or Function should always be included in the code, even if you think the purpose of the code is obvious. This is done to make it easier to interpret what the code is doing and making maintenance easier. Always place the comments immediately after the declaration of the Sub or Function, not before it. This ensures the comments stay with the Subs and Functions.	
dgvComments	CommentIF	Req Comment for IF		True	True	1	5	Descriptive comments explaining the purpose of IF statements should always be included in the code, even if you think the purpose of the code is obvious.  Place the comment either immediately before the IF statement or on the same line.	
dgvComments	CommentFOR	Req Comment for FOR		True	True	1	5	Descriptive comments explaining the purpose of FOR statements should always be included in the code, even if you think the purpose of the code is obvious.  Place the comment either immediately before the FOR statement or on the same line.	
dgvComments	CommentDO	Req Comment for DO		True	True	1	5	Descriptive comments explaining the purpose of DO statements should always be included in the code, even if you think the purpose of the code is obvious.  Place the comment either immediately before the DO statement or on the same line.	
dgvComments	CommentWHILE	Req Comment for While		True	True	1	3	Descriptive comments explaining the purpose of WHILE statements should always be included in the code, even if you think the purpose of the code is obvious.  Place the comment either immediately before the WHILE statement or on the same line.	
dgvComments	CommentSELECT	Req Comment for Select Case		True	True	3	3	Descriptive comments explaining the purpose of SELECT CASE statements should always be included in the code, even if you think the purpose of the code is obvious.  Place the comment either immediately before the SELECT CASE statement or on the same line.	
dgvFormDesign	RenameObjects	Rename Form Names with Prefixes Identifying Object Types	Objects referenced in the code need to include proper prefix indicating object type	True	True	1	5	It is a best practice to rename all objects on your form that are referenced in the code with appropriate prefixes. This makes the code more understandable, and also helps Intellisense suggest appropriate objects as you are writing the code.	
dgvFormDesign	IncludeFrmInFormName	Include frm in Form Name		False	False	2	5	It is a best practice to rename all your Forms with a frm prefix. Do this either when you create the form (best approach) or do the renaming in the Solution Explorer window. Renaming the form in the Properties window sometimes does not rename the actual filename, and can therefore cause confusion.	
dgvFormDesign	ChangeFormText	Change Form Text	Displayed text at top of form should be descriptive	True	True	5	5	The default Form Text property is the name of the form, and is displayed at the top of the form. This is generally not appropriate for a well developed application. Change the Form name to something appropriate.	
dgvFormDesign	ChangeFormColor	Change Form Background Color		True	True	5	5	Changing the Form background color from the default gray is an easy way to add some style to an application. This is changed in the Form Properties window.	
dgvFormDesign	SetFormAcceptButton	Set Form Accept Button	Should be set at design time using AcceptButton Property 	True	True	5	5	Setting the Form's Accept Button property indicate what happens when the user hits the Enter key. It can be set to replicate the actions of any button.	
dgvFormDesign	SetFormCancelButton	Set Form Cancel Button	Should be set at design time using CancelButton Property 	True	True	5	5	Setting the Form's Cancel Button property indicate what happens when the user hits the Escape key. It can be set to replicate the actions of any button.	
dgvFormDesign	ModifyStartPosition	Modify Form Start Position		True	True	5	5	The default Form start position is in the top left portion of the screen. This Form property can be changed to shift the start position to a different location on the screen.	
dgvFormDesign	LogicFormLoad	Utilize Form Load Method		True	True	3	3	The Form Load Method executes when the form loads. Double click the form to create a Stub for this method. It is useful to include code that will initialize variables in the Form Load method.	
dgvFormObj	ButtonObj	Use of Button Objects		True	True	1	3	Button Objects are required and should use the prefix (btn)	
dgvFormObj	TextboxObj	Use of Textbox Objects		False	False	2	5	Textbox Objects are required and should use the prefix (txt) 	
dgvFormObj	ActiveLabels	Include lbl Prefix on Active Labels		False	False	2	5	You should always apply appropriate object prefixes to objects referenced in the code. Labels which are referenced in the code are referred to as Active Labels and should include the lbl prefix.	
dgvFormObj	NonActiveLabels	NonActive Labels Objects		True	True	2	2	Labels not referenced in the code are Non-Active and do not require the lbl prefix since they are static.	
dgvFormObj	ComboBoxObj	Use of a ComboBox Objects		True	True	2	2	ComboBox Objects are a useful way of presenting the user a list of appropriate options. They should include a (cbx) prefix	
dgvFormObj	ListBoxObj	Use of a ListBox Objects		True	True	2	2	ListBox Objects are useful to display a short list of options. They are similar to a ComboBox  but do not drop down. They should include a (lbx) prefix	
dgvFormObj	RadioButtonObj	Use of Radio Buttons Objects		True	True	2	2	RadioButton Objects allow the use to select one option among the list of available options. You can have multiple radio button groups by placing them into containers such as a panel or groupbox. The Checked property indicates if the option is selected or not. . They should use a (rbn) prefix	
dgvFormObj	GroupBoxObj	Use of GroupBox Objects.		True	True	2	2	A Groupbox object allows you to visually separate portions of the User Interface from other elements. You can also include a groupbox title in the top left portion of the box. Objects in the groupbox move as one unit. Unless the groupbox is referenced in code, it need not use a prefix.	
dgvFormObj	OpenFileDialogObj	Use of an OpenFileDialog Objects.		True	True	2	2	An OpenFileDialog is a component that allows the user to open up a file manager to select a file to load. It is dropped on the form, but is placed in the gutter. It is displayed with the .ShowDialog method, and selected file returned in the .Filename property.	
dgvFormObj	SaveFileDialogObj	Use of SaveFileDialog Objects.		True	True	2	2	An SaveFileDialog is a component that allows the user to use a file manager interface to select location to save a file. It is dropped on the form, but is placed in the gutter. It is displayed with the .ShowDialog method, and selected file returned in the .Filename property.	
dgvFormObj	WebBrowserObj	Use of WebBrowser Objects.		True	True	2	2	The WebBrowser is an object that allows the display of web content in your application.  It is important to include full addresses in the URL. At design time include the leading http:// in the addess placed in the URL property. If loading a local file, you need a file:/// prefix. When loading the address pro grammatically, the address must to converted to a URI variable first. 	
dgvImports	SystemIO	Include System.IO		False	False	5	5	The Imports System.Net included at the very top of a Class file expands the Visual Basic Name space to include commands useful for working with the web. One useful object it makes available is the WebClient which can be used to download web pages.	
dgvImports	SystemNet	Include System.Net		False	False	5	5	The Imports System.DB included at the very top of a Class file expands the Visual Basic Name space to include database operations.	
dgvImports	SystemDB	Include System.DB		False	False	5	5	The Imports System.DB included at the very top of a Class file expands the Visual Basic Name space to include database operations.	
dgvDataStructures	VarArrays	Use of Array		True	True	5	5	Visual Basic supports both one dimensional arrays as well as multidimensional arrays. You declare these like any other variable, except you include a set of parentheses after the variable name. You do need to indicate the data type of the array. You can redefine the size of the array with a redim statement, Including the optional Preserve statement keeps all the data in the array after it is resized. If the preserve is omitted, the array is resized, but all the data is lost.	
dgvDataStructures	VarLists	Use of List		True	True	5	5	A List is similar to an array, except if supports a lot more management functions. You can sort the List, as well as insert and delete elements. You do not specify the size of the list. Instead you use the .Add method to add an item to the list. You again have to specify a data type, but that data type can be a Structure, which makes the List very versatile.	
dgvDataStructures	VarStructures	Use of Structure		False	False	5	5	A structure allows you to define your own data type. Unlike an Array, each element of the structure can be a different data type. So you can define a structure as a person, with Name, DOB, Gender fields. You then can define either an array or a list based on the structure (i.e., Dim Employee(100) as Person, or Dim Employee as List (of Person)).	
dgvDataTypes	VarString	Use of String		False	False	5	5	It is important to use appropriate data types in your code. String statements hold text. This check is looking for the specific declaration of String Variables.	
dgvDataTypes	VarInteger	Use of Integer		True	True	5	5	It is important to use appropriate data types in your code. Integer variables are used when there is NO possibility of decimal results. Examples might be a sales amount., or number of attendees. If there is any possibility of a decimal value, then a Decimal or Double variable type should be used. 	
dgvDataTypes	VarDecimal	Use of Decimal		True	True	5	5	It is important to use appropriate data types in your code. Decimal / Double variables are used when there IS a possibility of decimal results. Examples might include an Average amount, Measurements (i.e., 2.5 gallons, 3.25 hours).	
dgvDataTypes	VarDate	Use of Date		True	True	5	5	It is important to use appropriate data types in your code.Date variables are used whenever you are dealing with dates or times. Using date variables allows you to do time calculations (how many days until your birthday), and do time differences (how much time as passed).	
dgvDataTypes	VarBoolean	Use of Boolean		True	True	5	5	It is important to use appropriate data types in your code. Boolean variables can only be either True or False. These are useful when you need an indicator (ie. IsWrong). Be careful because some situations where it seems a boolean variable may be appropriate, the answer may need a third option of Unknown (i.e., IsMarried)	
dgvDataTypes	VariablePrefixes	Rename Variables with Prefixes Identifying Data Types		True	True	1	5	Just as it is good practice to rename Objects on the Form with appropriate prefixes, it can also be useful to rename variables with prefixes, such as int for Integer, dec for Decimal and bool (or Is) for Boolean. This can held with identifying the variable datatypes, and also make Intellisense more efficient.	
dgvCoding	LogicIF	Req use of IF		True	True	1	5	This is a check to see how many times an IF statements were used in the code.	
dgvCoding	LogicFOR	Req use of FOR		True	True	1	5	This is a check to see how many times FOR statement were used in the code.	
dgvCoding	LogicDO	Req use of DO		True	True	1	5	This is a check to see how many times DO statements were used in the code.	
dgvCoding	LogicWHILE	Req use of WHILE		True	True	1	5	This is a check to see how many times WHILE statements were used in the code.	
dgvCoding	LogicElse	Req use of Else		True	True	1	5	This is a check to see how many times ELSE  statements were used in the code.	
dgvCoding	LogicElseIF	Req use of ElseIF		True	True	1	5	This is a check to see how many times ELSEIFstatements were used in the code.	
dgvCoding	LogicMessageBox	Req use of MessageBox		True	True	2	2	This is a check to see how many times MESSAGEBOX statements were used in the code.	
dgvCoding	LogicNestedIF	Req use of Nested IF		True	True	2	2	This is a check to see how many times NESTED IF statements were used in the code.	
dgvCoding	LogicNestedFOR	Req use of Nested FOR		True	True	2	2	This is a check to see how many times NESTED FOR statements were used in the code.	
dgvCoding	LogicSelectCase	Req use of Select Case		True	True	1	5	This is a check to see how many times SELECT CASE statements were used in the code.	
dgvCoding	LogicConcatination	Req String Concatenation		True	True	1	5	This is a check to see how many times statements involving String Concatenation were used in the code.	
dgvCoding	LogicConvertToString	Req Conversion to String (CStr or .toString)		True	True	5	5	This is a check to see how many times numbers were converted to strings using either CStr or .ToString..	
dgvCoding	LogicStringFormat	Req Formatting of String (.tostring() or String.Format()		True	True	5	5	This is a check to see how many times String Formatting was used (i.e., .toString ( ) or String.Format ( )).	
dgvCoding	LogicStringFormatParameters	Req Parametrized string format (string.Format(f,{0, "})		True	True	5	5	This is a check to see how many times Parametrized String Formatting was used. (String.Format(f, x1)	
dgvCoding	LogicComplexConditions	Req Complex Conditions (looks for AND / OR / ANDALSO / ORELSE)		True	True	1	5	This is a check to see how many times a Complex Condition involving AND / OR / ANDALSO / ORELSE  were used in the code.	
dgvCoding	LogicCaseInsensitive	Req Case Insensitive	This involves using either .toUpper or .toLower	True	True	1	5	This checks IF statements to see if case insensitive comparisons were used. 	
dgvCoding	LogicTryCatch	Req use of Try ... Catch		True	True	1	5	A Try ... Catch is a useful way to prevent program crashes, and help to debug your code. This checks how many times they were implemented.	
dgvCoding	LogicStreamReader	Req use of ScreenReader		True	True	1	5	This is a check to see how many times  Screen Reader statements were used in the code.	
dgvCoding	LogicStreamWriter	Req use of ScreenWriter		True	True	1	5	This is a check to see how many times  Screen Writer statements were used in the code.	
dgvCoding	LogicStreamReaderClose	Req matching ScreenReader.Close		True	True	1	5	This is a check to see if all  Screen Readers have matching close statements. 	
dgvCoding	LogicStreamWriterClose	Req matching ScreenWriter.Close		True	True	1	5	This is a check to see if all  Screen Writers have matching close statements. 	
dgvCoding	ObjOpenFileDialog	Req use of Open File Dialog		True	True	3	3	This is a check to see if an Open File Dialog is used.	
dgvCoding	ObjSaveFileDialog	Req use of Save File Dialog		True	True	3	3	This is a check to see if an Save File Dialog is used.	
dgvSubs	LogicSub	Req use of User Defined Subroutine or Function		True	True	1	5	Checks to see how many User Defined Subs and Functions have been declared	
dgvSubs	LogicOptional	Req use of Optional Parameters in Sub / Function		True	True	1	5	Checks to see how many Optional variables have been utilized in Subs and Functions. 	
dgvSubs	LogicByRef	Req use of ByRef Parameters in Sub / Function		True	True	1	5	Checks to see how many byRef variables have been utilized in Subs and Functions. 	
dgvSubs	LogicMultipleForms	Include Multiple Forms		False	False	5	5	Checks to see how Forms have been utilized in the Application	
dgvSubs	LogicModule	Include Module		False	False	5	5	Checks to see any Modules have been used in the application	
dgvSubs	LogicFormLoad	Include a Form LOAD Method		True	True	5	5		
